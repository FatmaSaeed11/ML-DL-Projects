# -*- coding: utf-8 -*-
"""Assignment 2 version 1 with gradient descent.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SGsZInbbMigyL2vTU2E8omr8AiIvL0r_

Linear regression house price prediction from scratch .
"""

#import important libraries
import os
import numpy as np
import pandas as pd
import tensorflow as tf
import seaborn as sns
import math
import copy
import matplotlib.pyplot as plt
np.set_printoptions(precision=2)

(x_train,y_train),(x_test,y_test)=tf.keras.datasets.boston_housing.load_data(path='boston_housing',test_split=0.20,seed=113)

print(f"X Shape: {x_train.shape}, X Type:{type(x_train)})")
print(x_train)
print(f"y Shape: {y_train.shape}, y Type:{type(y_train)})")
print(y_train)

#intialize bias and weight
b_init = 785.1811367994083
w_init = np.array([ 0.39133535, 18.75376741, -53.36032453, -26.42131618,0.49133566,-54.46734522,-27.10330853,19.45892301,50.34213011,0.42101322,20.10156332,23.14588212,-28.54271241])
print(f"w_init shape: {w_init.shape}, b_init type: {type(b_init)}")

#fun to predict single loop
def predict_single_loop(x, w, b):

    n = x.shape[0]
    p = 0
    for i in range(n):
        p_i = x[i] * w[i]
        p = p + p_i
    p = p + b
    return p

#check x vector shape
x_vec = x_train[0,:]
print(f"x_vec shape {x_vec.shape}, x_vec value: {x_vec}")

#check shape of predict single loop
f_wb = predict_single_loop(x_vec, w_init, b_init)
print(f"f_wb shape {f_wb.shape}, prediction: {f_wb}")

# prediction fun
def predict(x_test, w, b):
    p = np.dot(x_test, w) + b
    return p

#check shape of x vector
x_vec = x_train[0,:]
print(f"x_vec shape {x_vec.shape}, x_vec value: {x_vec}")

#check shape of prediction
f_wb = predict(x_vec,w_init, b_init)
print(f"f_wb shape {f_wb.shape}, prediction: {f_wb}")

#cost fun
def compute_cost(x, y, w, b):
    m = x.shape[0]
    cost = 0.0
    for i in range(m):
        f_wb_i = np.dot(x[i], w) + b
        cost = cost + (f_wb_i - y[i])**2
    cost = cost / (2 * m)
    return cost

#print cost
cost = compute_cost(x_train, y_train, w_init, b_init)
print(f'Cost at optimal w : {cost}')

# fun to find gradient
def compute_gradient(x, y, w, b):

    m,n = x.shape
    dj_dw = np.zeros((n,))
    dj_db = 0.

    for i in range(m):
        err = (np.dot(x[i], w) + b) - y[i]
        for j in range(n):
            dj_dw[j] = dj_dw[j] + err * x[i, j]
        dj_db = dj_db + err
    dj_dw = dj_dw / m
    dj_db = dj_db / m

    return dj_db, dj_dw

#call fun of gradient
tmp_dj_db, tmp_dj_dw = compute_gradient(x_train, y_train, w_init, b_init)
print(f'dj_db at initial w,b: {tmp_dj_db}')
print(f'dj_dw at initial w,b: \n {tmp_dj_dw}')

# fun to find gradient descent
def gradient_descent(x, y, w_in, b_in, cost_function, gradient_function, alpha, num_iters):
    J_history = []
    w = copy.deepcopy(w_in)
    b = b_in

    for i in range(num_iters):


        dj_db,dj_dw = gradient_function(x, y, w, b)


        w = w - alpha * dj_dw
        b = b - alpha * dj_db

        if i<50:
            J_history.append( cost_function(x, y, w, b))

        if i% math.ceil(num_iters / 10) == 0:
            print(f"Iteration {i:4d}: Cost {J_history[-1]:8.2f}   ")

    return w, b, J_history

#prediction to check the accuracy
initial_w = np.zeros_like(w_init)
initial_b = 0.
iterations = 11000
alpha = 5.0e-7

w_final, b_final, J_hist = gradient_descent(x_train, y_train, initial_w, initial_b,
                                                    compute_cost, compute_gradient,
                                                    alpha, iterations)
print(f"b,w found by gradient descent: {b_final:0.2f},{w_final} ")
m, _ = x_train.shape
for i in range(m):
    a = np.dot(x_train[i], w_final) + b_final
    b = y_train[i]
    sum = a-b
    print(f"prediction: {a}, target value: {b}")

#show how out of our model is near to out of target
print((np.mean(sum))**2)