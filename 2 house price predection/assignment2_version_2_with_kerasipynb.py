# -*- coding: utf-8 -*-
"""Assignment2 version 2. With kerasipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19DYyYjFNQ0MIyuEwhvskacW1BdWJX6G4

Linear regression house price prediction with keras.
"""

#import important libraries
import numpy as np
import pandas as pd
import tensorflow as tf
import keras
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense

#load dataset
(x_train,y_train),(x_test,y_test)=tf.keras.datasets.boston_housing.load_data(path='boston_housing',test_split=0.20,seed=113)

#check data existance
print(x_train.shape)
print(x_test.shape)
print(y_train.shape)
print(y_test.shape)

#scale third column
min_max_scaler=MinMaxScaler()
min_max_scaler.fit(x_train)
x_train=min_max_scaler.transform(x_train)
x_test=min_max_scaler.transform(x_test)

#create our model
model=Sequential(name='BostonHousingPrices')
model.add(Dense(100,input_dim=13,activation='relu',name='Hidden-1'))
model.add(Dense(100,input_dim=13,activation='relu',name='Hidden-2'))
model.add(Dense(1,activation='linear',name='output'))

#compile model
model.compile(optimizer='rmsprop',loss='mse',metrics=['mae'])

#fit model
history=model.fit(x_train,y_train,batch_size=32,epochs=50,validation_split=0.2)

#plotting our results
plt.plot(history.history['loss'])
plt.plot(history.history['mae'])
plt.title('training losss')
plt.xlabel('epoch')
plt.ylabel('loss')
plt.show()

#evaluation model
results=model.evaluate(x_test,y_test)
for i in range (len(results)):

    print(f'{model.metrics_names[i]}-->{results[i]}')

#prediction
y_pred = model.predict(x_test)

#print y predict and y test
np.set_printoptions(precision=2)
print(np.concatenate((y_pred.reshape(len(y_pred),1),y_test.reshape(len(y_test),1)),1))

#show how out of our model is near to out of target
print((np.mean(y_pred - y_test))**2)

#print array of output of our model
print((np.array(y_pred - y_test))**2)