# -*- coding: utf-8 -*-
"""Assignment 5_ pattern_keras_final.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ys12BO_tKqz7ZZSuWuCp1jGqm9nKsHqC

import libraries
"""

import numpy as np
import pandas as pd

import matplotlib.pyplot as plt
import tensorflow as tf

from keras.utils import normalize
from tensorflow.keras.layers import Flatten,Dense
from sklearn.model_selection import train_test_split
from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.preprocessing.sequence import pad_sequences
from tensorflow.keras.utils import to_categorical
from sklearn.metrics import accuracy_score

"""import dataset from kaggel"""

!pip install kaggle

!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json

!kaggle datasets download -d shivanandmn/multilabel-classification-dataset

from zipfile import ZipFile
dataset='/content/multilabel-classification-dataset.zip'

with ZipFile(dataset,'r') as zip:
  zip.extractall()
  print('data extracted')

"""data preparation"""

data_train=pd.read_csv('/content/train.csv')
data_test=pd.read_csv('/content/test.csv')

data_horizontal = data_train.columns
print(data_horizontal)
x_train = data_train[data_horizontal[1:3]]
y_train = data_train[data_horizontal[3:]]
x_test = data_test[data_horizontal[1:3]]

data_train.shape

data_test.shape

data_train.head()

data_test.head()

"""fun to convert text to vector"""

def text_to_vectors(df, max_len=128, max_features=None, vocab_size=None):

  text_data = df['TITLE'] + ' ' + df['ABSTRACT']

  tokenizer = Tokenizer(num_words=max_features if max_features else vocab_size)
  tokenizer.fit_on_texts(text_data)
  sequences = tokenizer.texts_to_sequences(text_data)

  padded_sequences = pad_sequences(sequences, maxlen=max_len)

  return padded_sequences

x_train = text_to_vectors(x_train)
x_test = text_to_vectors(x_test)

print('x_train',x_train)

print('x_test',x_test)

"""build our model"""

input_shape=x_train.shape[1:]
model= tf.keras.Sequential()
model.add(Dense(64, activation="relu", input_shape=input_shape)),
model.add(Dense(32, activation="relu")),
model.add(Dense(6, activation="sigmoid"))

"""compile our model"""

model.compile(loss="binary_crossentropy", optimizer="adam", metrics=["accuracy"])

"""fit our model and know accuracy"""

model.fit(x_train, y_train, epochs=30, batch_size=32)

score = model.evaluate(x_train,y_train)
print(' accuracy:', score[1])