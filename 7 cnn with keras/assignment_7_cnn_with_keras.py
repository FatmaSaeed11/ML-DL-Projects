# -*- coding: utf-8 -*-
"""Assignment 7 CNN with Keras.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dzfmU1VyrYDHk4oo11-vunlWSDggI_MN

LenNet-5 using Keras and Mnist dataset

import important libraries
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import tensorflow as tf
import math

from tensorflow import keras
from keras.utils import normalize,to_categorical
from tensorflow.keras.layers import Flatten,Dense,Conv2D,AveragePooling2D
from sklearn.model_selection import train_test_split

from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score,classification_report

"""import dataset"""

mnist=tf.keras.datasets.mnist

"""split dataset"""

(x_train,y_train),(x_test,y_test)=mnist.load_data()

"""prepare dataset"""

rows,cols=28,28

x_train=x_train.reshape(x_train.shape[0],rows,cols,1)
x_test=x_test.reshape(x_test.shape[0],rows,cols,1)

input_shape=(rows,cols,1)

"""normalization"""

x_train=x_train.astype('float32')
x_test=x_test.astype('float32')

x_train=x_train/255.0
x_test=x_test/255.0

y_train=tf.keras.utils.to_categorical(y_train,10)
y_test=tf.keras.utils.to_categorical(y_test,10)

"""build our model"""

model=tf.keras.Sequential()
model.add(Conv2D(filters=6,kernel_size=(5,5),strides=(1,1),activation='tanh',input_shape=input_shape))
model.add(AveragePooling2D(pool_size=(2,2),strides=(2,2)))
model.add(Conv2D(filters=16,kernel_size=(5,5),strides=(1,1),activation='tanh',input_shape=input_shape))
model.add(AveragePooling2D(pool_size=(2,2),strides=(2,2)))
model.add (Flatten())
model.add(Dense(units=120,activation='tanh'))
model.add (Flatten())
model.add(Dense(units=84,activation='tanh'))
model.add(Dense(units=10,activation='softmax'))

"""compile moodel"""

model.compile(loss = 'categorical_crossentropy',optimizer=tf.keras.optimizers.SGD(learning_rate=0.1,momentum=0.0,weight_decay=0.0), metrics=['acc'])

"""fit model"""

history=model.fit(x_train,y_train,epochs=10,batch_size=128,verbose=1)

"""accuracy"""

loss,acc=model.evaluate(x_test,y_test)
print('Total Accuracy',acc)

x_train=x_train.reshape(x_train.shape[0],28,28)
x_test=x_test.reshape(x_test.shape[0],28,28)

image_index=5555
plt.imshow(x_test[image_index].reshape(28,28),cmap='Greys')
print('the real value is ')
plt.show()

pred=model.predict(x_test[image_index].reshape(1,rows,cols,1))
print('the predicted value is ', pred.argmax())

