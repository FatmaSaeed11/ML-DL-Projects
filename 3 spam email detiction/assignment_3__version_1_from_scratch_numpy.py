# -*- coding: utf-8 -*-
"""Assignment 3 _version 1_from scratch_numpy.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OrZNvn7JzWMMpgs5Q6A27eyIoKegEnzN

Spam email classifier from scratch

1.import important libraries
"""

import numpy as np
import matplotlib as plt
import pandas as pd
import seaborn as sns
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score

"""Build our logistic regression model from scratch"""

class Logistic_Regression():


  #  learning rate and iterations
  def __init__(self, learning_rate, no_of_iterations):

    self.learning_rate = learning_rate
    self.no_of_iterations = no_of_iterations

  # fit model
  def fit(self, X, Y):
    self.m, self.n = X.shape
 # w and b intialization
    self.w = np.zeros(self.n)
    self.b = 0
    self.X = X
    self.Y = Y

    for i in range(self.no_of_iterations):
      self.update_weights()

  def update_weights(self):

    # sigmoid function
    Y_hat = 1 / (1 + np.exp( - (self.X.dot(self.w) + self.b ) ))

    # gradient
    dw = (1/self.m)*np.dot(self.X.T, (Y_hat - self.Y))
    db = (1/self.m)*np.sum(Y_hat - self.Y)

    #  gradient descent
    self.w = self.w - self.learning_rate * dw
    self.b = self.b - self.learning_rate * db

  #predict model
  def predict(self, X):

    Y_pred = 1 / (1 + np.exp( - (X.dot(self.w) + self.b ) ))
    Y_pred = np.where( Y_pred > 0.5, 1, 0)
    return Y_pred

"""2.load dataset and data preprocessing"""

pip install ucimlrepo

from ucimlrepo import fetch_ucirepo

# fetch dataset
spambase = fetch_ucirepo(id=94)

# data
features =spambase.data.features
target =spambase.data.targets

print(features)

print(target)

features.head()

"""1 is spam email------
0 is not spam email

Data Standarization
"""

scaler=StandardScaler()
standard_data=scaler.fit_transform(features)

print(standard_data)

features=standard_data

print(features)

print(target)

"""split data into train & test"""

X_train,X_test,Y_train,Y_test=train_test_split(features,target,test_size=0.2,random_state=2)

print(features.shape,X_train.shape,X_test.shape,target.shape,Y_train.shape)

"""train logistic regression model"""

model = Logistic_Regression(learning_rate=0.001,no_of_iterations =3000)

"""reshape and convert dataframe to numpy array"""

print(X_train.shape,Y_train.shape)

print(type(Y_train))

Y_train = Y_train.to_numpy()

Y_train = Y_train.reshape(-1)

"""fit model"""

model.fit(X_train, Y_train)

"""check the accuracy of train"""

X_train_prediction = model.predict(X_train)
training_accuracy = accuracy_score( Y_train, X_train_prediction)

print('Accuracy  training  : ', training_accuracy)

"""check the accuracy of test"""

X_test_prediction = model.predict(X_test)
test_accuracy = accuracy_score( Y_test, X_test_prediction)

print('Accuracy test: ', test_data_accuracy)